version: "3.9"

services:
  notification_service:
    build:
      context: ./Notifications
      dockerfile: Dockerfile.app
    depends_on:
      - postgres_notification_db
      - cronjob_notification_service
    container_name: "notification_service"
    environment:
      - MAIL_USERNAME=egs.2024@outlook.com
      -  MAIL_PASSWORD=Egs_2024Notify!
      -  MAIL_FROM=egs.2024@outlook.com
      -  MAIL_PORT=587
      -  MAIL_SERVER=smtp-mail.outlook.com
      -  MAIL_FROM_NAME=Notify
      -  TOKEN=6942311486:AAHzFqxWOuM7eeRSs_K40Ih0S0XtHVfL01s
      - DATABASE_URL=postgresql://postgres:my_password@postgres_notification_db:5432/notification_db
    ports:
    - "8080:8000"

  cronjob_notification_service:
    build:
      context: ./Notifications
      dockerfile: Dockerfile.cronjob
    depends_on:
      - postgres_notification_db
    container_name: "notification_service_cronjob"
    environment:
      - DATABASE_URL=postgresql://postgres:my_password@postgres_notification_db:5432/notification_db
    ports:
      - "8001:8000"

  postgres_notification_db:
      image: postgres:latest
      container_name: "postgres_notification_db"
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: my_password
        POSTGRES_DB: notification_db
      volumes:
        - postgres_data:/var/lib/postgresql/data  # Persistent volume for data
      ports:
        - "5432:5432"  # Expose port 5432 from the container to the host
      expose:
        - 5432
        
  frontend:
    build:
      context: ./FrontEnd
      dockerfile: Dockerfile
    ports:
      - "3000:3000"

  todo_api:
    build:
      context: ./TodoList
      dockerfile: Dockerfile
    container_name: "todo_api"
    ports:
      - '8002:8002'
    depends_on:
      - todo_db
    environment:
    - DATABASE_URL=mysql://docker:docker@todo-db:3306/exampledb
    volumes:
      - ./TodoList:/todo

  todo_db:
    image: mysql
    container_name: "todo-db"
    ports:
      - 3306:3306
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: docker
      MYSQL_DATABASE: exampledb
      MYSQL_USER: docker
      MYSQL_PASSWORD: docker
    volumes:
      - db-photo-upload-service:/var/lib/mysql
    expose:
      - 3306

  meetings-api:
    build:
      context: ./meetings
      dockerfile: Dockerfile
    container_name: "meetings-api"
    restart: always
    environment: 
      - DATABASE_URL=postgresql://postgres:example@meetings_db:5432/postgres
    ports:
      - "80:80"
    depends_on:
      - meetings_db
  
  meetings_db:
    image: postgres
    restart: always
    shm_size: 128mb
    container_name: "meetings_db"
    environment:
      POSTGRES_PASSWORD: example
    ports:
      - "5433:5432"

  documents-api:
    build:
      context: ./documents
      dockerfile: Dockerfile
    container_name: "documents-api"
    restart: always
    environment: 
      - DATABASE_URL=postgresql://postgres:example@documents_db:5432/postgres
    ports:
      - "81:80"
    depends_on:
        - documents_db

  documents_db:
    container_name: documents_db
    image: postgres
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_PASSWORD: example
    ports:
      - "5434:5432"

  auth_api:
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: "auth_api"
    ports:
      - "8003:80"
    depends_on:
      - auth_db
    environment:
      - DATABASE_URL=mongodb://bernardofale:admin@auth_db:27017

  auth_db:
    image: mongo
    container_name: "auth_db"
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=bernardofale
      - MONGO_INITDB_ROOT_PASSWORD=admin

  composer-db:
    image: redis
    container_name: "composer-db"
    restart: always
    ports:
      - "6379:6379"

  composer:
    build:
      context: ./composer/
      dockerfile: Dockerfile

    container_name: "egs-composer"
    restart: always
    environment:
      - REDIS_HOST=composer-db
      - TODO_HOST=todo_api
      - TODO_PORT=8002
      - AUTH_HOST=auth_api
      - AUTH_PORT=80
      - DOCS_HOST=documents-api
      - DOCS_PORT=80
      - MEETINGS_HOST=meetings-api
      - MEETINGS_PORT=80
      - NOTIFICATIONS_HOST=notification_service
      - NOTIFICATIONS_PORT=8000
    ports:
      - "8004:8004"
    depends_on:
      - composer-db
  

volumes:
  postgres_data:  # Volume named "postgres_data"
  db-photo-upload-service: # Volume todo_database
  db_data:
