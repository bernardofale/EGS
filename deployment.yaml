# Frontend deployment
---
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: frontend
  namespace: egs-docmanager
spec:
  replicas: 1
  selector: 
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: registry.deti/egs-docmanager/frontend:1.2
        ports:
        - containerPort: 3000

# Frontend service
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: egs-docmanager
spec:
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: frontend

# Todo deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-api
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-api
  template:
    metadata:
      labels:
        app: todo-api
    spec:
      containers:
      - name: todo-api
        image: registry.deti/egs-docmanager/todo:1.2
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8002
        env:
        - name: DATABASE_URL
          value: "mysql://docker:docker@todo-db:3306/exampledb"

# Todo Service
---
apiVersion: v1
kind: Service
metadata:
  name: todo-api
  namespace: egs-docmanager
spec:
  ports:
    - port: 8002
      targetPort: 8002
  selector:
    app: todo-api


# Todo DB Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-db
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-db
  template:
    metadata:
      labels:
        app: todo-db
    spec:
      containers:
      - image: mysql
        name: todo-db
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
          - name: mysql-persistent-storage
            mountPath: /var/lib/mysql
        env: 
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_DATABASE
          value: exampledb
        - name: MYSQL_USER
          value: docker
        - name: MYSQL_PASSWORD
          value: docker
        - name: DATABASE_URL
          value: "mysql://docker:docker@todo-db:3306/exampledb"
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: todo-pv-claim

# Todo DB Service
---
apiVersion: v1
kind: Service
metadata:
  name: todo-db
  namespace: egs-docmanager
spec:
  ports:
    - port: 3306
      targetPort: 3306  
  selector:
    app: todo-db
  type: NodePort

# Deployment meetings
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meetings
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meetings
  template:
    metadata:
      labels:
        app: meetings
    spec:
      containers:
      - name: meetings
        image: registry.deti/egs-docmanager/meetings:v6
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8005
        env:
        - name: DATABASE_URL
          value: "postgresql://postgres:example@meetings-db:5432/postgres"

# Service meetings
---
apiVersion: v1
kind: Service
metadata:
  name: meetings
  namespace: egs-docmanager
spec:
  ports:
    - port: 8005
      targetPort: 8005
  selector:
    app: meetings

# Deployment meetings db 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meetings-db
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meetings-db
  template:
    metadata:
      labels:
        app: meetings-db
    spec:
      containers:
      - image: postgres
        name: meetings-db
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
          - name: postgres-persistent-storage
            mountPath: /var/lib/postgres
        env:
        - name: POSTGRES_PASSWORD
          value: example
      volumes:
        - name: postgres-persistent-storage
          persistentVolumeClaim:
            claimName: meetings-pv-claim

#  Service meetings DB
---
apiVersion: v1
kind: Service
metadata:
  name: meetings-db
  namespace: egs-docmanager
spec:
  ports:
    - port: 5432
      targetPort: 5432  
  selector:
    app: meetings-db
  type: NodePort


# Deployment for Adminer Meetings
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer
        image: adminer
        ports:
        - containerPort: 8005
          name: adminer

# Service for Adminer Meetings
---
apiVersion: v1
kind: Service
metadata:
  name: adminer
  namespace: egs-docmanager
spec:
  ports:
    - port: 8005
      targetPort: 8005
  selector:
    app: adminer

# Deployment documents
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: documents
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: documents
  template:
    metadata:
      labels:
        app: documents
    spec:
      containers:
      - name: documents
        image: registry.deti/egs-docmanager/documents:1.2
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8009
        env:
        - name: DATABASE_URL
          value: "postgresql://postgres:example@documents-db:5432/postgres"
                

# Service documents
---
apiVersion: v1
kind: Service
metadata:
  name: documents
  namespace: egs-docmanager
spec:
  ports:
    - port: 8009
      targetPort: 8009
  selector:
    app: documents

# Deployment documents db 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: documents-db
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: documents-db
  template:
    metadata:
      labels:
        app: documents-db
    spec:
      containers:
      - image: postgres
        name: documents-db
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
          - name: postgres-persistent-storage
            mountPath: /var/lib/postgres
        env:
        - name: POSTGRES_PASSWORD
          value: example
      volumes:
        - name: postgres-persistent-storage
          persistentVolumeClaim:
            claimName: documents-pv-claim

#  Service documents DB
---
apiVersion: v1
kind: Service
metadata:
  name: documents-db
  namespace: egs-docmanager
spec:
  ports:
    - port: 5432
      targetPort: 5432  
  selector:
    app: documents-db
  type: NodePort


# Deployment for Adminer documents
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer
        image: adminer
        ports:
        - containerPort: 8009
          name: adminer

# Service for Adminer documents
---
apiVersion: v1
kind: Service
metadata:
  name: adminer
  namespace: egs-docmanager
spec:
  ports:
    - port: 8009
      targetPort: 8009
  selector:
    app: adminer

# notification deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notification
  template:
    metadata:
      labels:
        app: notification
    spec:
      containers:
      - name: notification
        image: registry.deti/egs-docmanager/notifications:1.3
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8000
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "root"
        - name: MAIL_USERNAME
          value: "egs.2024@outlook.com"
        - name: MAIL_PASSWORD
          value: "Egs_2024Notify!"
        - name: MAIL_FROM
          value: "egs.2024@outlook.com"
        - name: MAIL_PORT
          value: "587"
        - name: MAIL_SERVER
          value: "smtp-mail.outlook.com"
        - name: MAIL_FROM_NAME
          value: "Notify"
        - name: TOKEN
          value: "6942311486:AAHzFqxWOuM7eeRSs_K40Ih0S0XtHVfL01s"
        - name: DATABASE_URL
          value: "postgresql://postgres:my_password@postgres-notification-db:5432/notification-db"


# notification Service
---
apiVersion: v1
kind: Service
metadata:
  name: notification
  namespace: egs-docmanager
spec:
  ports:
    - port: 8000 
      targetPort: 8000 
  selector:
    app: notification

# cronjob deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cronjob
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cronjob
  template:
    metadata:
      labels:
        app: cronjob
    spec:
      containers:
      - name: cronjob
        image: registry.deti/egs-docmanager/notifications.cronjob:1.2
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          value: "postgresql://postgres:my_password@postgres-notification-db:5432/postgres-notification-db"

# cronjob Service
---
apiVersion: v1
kind: Service
metadata:
  name: cronjob
  namespace: egs-docmanager
spec:
  ports:
    - port: 8001
      targetPort: 8000
  selector:
    app: cronjob
  
# postgres-notification-db  Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-notification-db
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-notification-db
  template:
    metadata:
      labels:
        app: postgres-notification-db
    spec:
      containers:
      - image: postgres:latest
        name: postgres-notification-db
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
          - name: postgres-persistent-storage
            mountPath: /var/lib/postgres
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "my_password"
        - name: POSTGRES_DB
          value: "notification-db"
      volumes:
        - name: postgres-persistent-storage
          persistentVolumeClaim:
            claimName: notifications-pv-claim

# postgres-notification-db  Service
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-notification-db
  namespace: egs-docmanager
spec:
  ports:
    - port: 5432
      targetPort: 5432  
  selector:
    app: postgres-notification-db
  type: NodePort

# Ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: notification-api-k3s
  namespace: egs-docmanager
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  rules:
  - host: grupo7-egs-deti.ua.pt
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: notification
            port: 
              number: 8000

# Ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: documents-api-k3s
  namespace: egs-docmanager
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  rules:
  - host: grupo7-egs-deti.ua.pt
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: documents
            port: 
              number: 8009


