# Frontend deployment
---
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: frontend
  namespace: egs-docmanager
spec:
  replicas: 1
  selector: 
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: registry.deti/egs-docmanager/frontend:1.4
        ports:
        - containerPort: 3000

# Frontend service
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: egs-docmanager
spec:
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: frontend

# Todo deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-api
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-api
  template:
    metadata:
      labels:
        app: todo-api
    spec:
      containers:
      - name: todo-api
        image: registry.deti/egs-docmanager/todo:1.4
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8002
        env:
        - name: DATABASE_URL
          value: "mysql://docker:docker@todo-db:3306/exampledb"

# Todo Service
---
apiVersion: v1
kind: Service
metadata:
  name: todo-api
  namespace: egs-docmanager
spec:
  ports:
    - port: 8002
      targetPort: 8002
  selector:
    app: todo-api


# Todo DB Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-db
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-db
  template:
    metadata:
      labels:
        app: todo-db
    spec:
      containers:
      - image: mysql
        name: todo-db
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
          - name: mysql-persistent-storage
            mountPath: /var/lib/mysql
        env: 
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_DATABASE
          value: exampledb
        - name: MYSQL_USER
          value: docker
        - name: MYSQL_PASSWORD
          value: docker
        - name: DATABASE_URL
          value: "mysql://docker:docker@todo-db:3306/exampledb"
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: todo-pv-claim

# Todo DB Service
---
apiVersion: v1
kind: Service
metadata:
  name: todo-db
  namespace: egs-docmanager
spec:
  ports:
    - port: 3306
      targetPort: 3306  
  selector:
    app: todo-db
  type: NodePort

# Deployment meetings
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meetings
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meetings
  template:
    metadata:
      labels:
        app: meetings
    spec:
      containers:
      - name: meetings
        image: registry.deti/egs-docmanager/meetings:1.4
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8005
        env:
        - name: DATABASE_URL
          value: "postgresql://postgres:example@meetings-db:5432/postgres"

# Service meetings
---
apiVersion: v1
kind: Service
metadata:
  name: meetings
  namespace: egs-docmanager
spec:
  ports:
    - port: 8005
      targetPort: 8005
  selector:
    app: meetings

# Deployment meetings db 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meetings-db
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meetings-db
  template:
    metadata:
      labels:
        app: meetings-db
    spec:
      containers:
      - image: postgres
        name: meetings-db
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
          - name: postgres-persistent-storage
            mountPath: /var/lib/postgres
        env:
        - name: POSTGRES_PASSWORD
          value: example
      volumes:
        - name: postgres-persistent-storage
          persistentVolumeClaim:
            claimName: meetings-pv-claim

#  Service meetings DB
---
apiVersion: v1
kind: Service
metadata:
  name: meetings-db
  namespace: egs-docmanager
spec:
  ports:
    - port: 5432
      targetPort: 5432  
  selector:
    app: meetings-db
  type: NodePort


# Deployment for Adminer Meetings
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer
        image: adminer
        ports:
        - containerPort: 8005
          name: adminer

# Service for Adminer Meetings
---
apiVersion: v1
kind: Service
metadata:
  name: adminer
  namespace: egs-docmanager
spec:
  ports:
    - port: 8005
      targetPort: 8005
  selector:
    app: adminer

# Deployment documents
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: documents
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: documents
  template:
    metadata:
      labels:
        app: documents
    spec:
      containers:
      - name: documents
        image: registry.deti/egs-docmanager/documents:1.4
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8009
        env:
        - name: DATABASE_URL
          value: "postgresql://postgres:example@documents-db:5432/postgres"
                

# Service documents
---
apiVersion: v1
kind: Service
metadata:
  name: documents
  namespace: egs-docmanager
spec:
  ports:
    - port: 8009
      targetPort: 8009
  selector:
    app: documents

# Deployment documents db 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: documents-db
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: documents-db
  template:
    metadata:
      labels:
        app: documents-db
    spec:
      containers:
      - image: postgres
        name: documents-db
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
          - name: postgres-persistent-storage
            mountPath: /var/lib/postgres
        env:
        - name: POSTGRES_PASSWORD
          value: example
      volumes:
        - name: postgres-persistent-storage
          persistentVolumeClaim:
            claimName: documents-pv-claim

#  Service documents DB
---
apiVersion: v1
kind: Service
metadata:
  name: documents-db
  namespace: egs-docmanager
spec:
  ports:
    - port: 5432
      targetPort: 5432  
  selector:
    app: documents-db
  type: NodePort


# Deployment for Adminer documents
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer
        image: adminer
        ports:
        - containerPort: 8009
          name: adminer

# Service for Adminer documents
---
apiVersion: v1
kind: Service
metadata:
  name: adminer
  namespace: egs-docmanager
spec:
  ports:
    - port: 8009
      targetPort: 8009
  selector:
    app: adminer

# notification deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notification
  template:
    metadata:
      labels:
        app: notification
    spec:
      containers:
      - name: notification
        image: registry.deti/egs-docmanager/notifications:1.4
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8000
        env:
        - name: MAIL_USERNAME
          value: "egs.2024@outlook.com"
        - name: MAIL_PASSWORD
          value: "Egs_2024Notify!"
        - name: MAIL_FROM
          value: "egs.2024@outlook.com"
        - name: MAIL_PORT
          value: "587"
        - name: MAIL_SERVER
          value: "smtp-mail.outlook.com"
        - name: MAIL_FROM_NAME
          value: "Notify"
        - name: TOKEN
          value: "6942311486:AAHzFqxWOuM7eeRSs_K40Ih0S0XtHVfL01s"
        - name: DATABASE_URL
          value: "postgresql://postgres:my_password@postgres-notification-db:5432/notification-db"


# notification Service
---
apiVersion: v1
kind: Service
metadata:
  name: notification
  namespace: egs-docmanager
spec:
  ports:
    - port: 8020 
      targetPort: 8000 
  selector:
    app: notification

# cronjob deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cronjob
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cronjob
  template:
    metadata:
      labels:
        app: cronjob
    spec:
      containers:
      - name: cronjob
        image: registry.deti/egs-docmanager/notifications.cronjob:1.4
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          value: "postgresql://postgres:my_password@postgres-notification-db:5432/notification-db"

# cronjob Service
---
apiVersion: v1
kind: Service
metadata:
  name: cronjob
  namespace: egs-docmanager
spec:
  ports:
    - port: 8023
      targetPort: 8000
  selector:
    app: cronjob
  
# postgres-notification-db  Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-notification-db
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-notification-db
  template:
    metadata:
      labels:
        app: postgres-notification-db
    spec:
      containers:
      - image: postgres:latest
        name: postgres-notification-db
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
          - name: postgres-persistent-storage
            mountPath: /var/lib/postgres
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "my_password"
        - name: POSTGRES_DB
          value: "notification-db"
      volumes:
        - name: postgres-persistent-storage
          persistentVolumeClaim:
            claimName: notifications-pv-claim

# postgres-notification-db  Service
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-notification-db
  namespace: egs-docmanager
spec:
  ports:
    - port: 5432
      targetPort: 5432  
  selector:
    app: postgres-notification-db
  type: NodePort


# Composer Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: egs-composer
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: egs-composer
  template:
    metadata:
      labels:
        app: egs-composer
    spec:
      containers:
      - name: egs-composer
        image: registry.deti/egs-docmanager/composer:1.4  # Replace with the correct image if needed
        ports:
        - containerPort: 8004
        env:
        - name: REDIS_HOST
          value: "composer-db"
        - name: TODO_HOST
          value: "todo-api"
        - name: TODO_PORT
          value: "8002"
        - name: AUTH_HOST
          value: "auth-api"
        - name: AUTH_PORT
          value: "8010"
        - name: DOCS_HOST
          value: "documents"
        - name: DOCS_PORT
          value: "8009"
        - name: MEETINGS_HOST
          value: "meetings"
        - name: MEETINGS_PORT
          value: "8005"
        - name: NOTIFICATIONS_HOST
          value: "notification"
        - name: NOTIFICATIONS_PORT
          value: "8000"
        volumeMounts:
        - name: composer-storage
          mountPath: /data
      volumes:
      - name: composer-storage
        persistentVolumeClaim:
          claimName: composer-pv-claim

# Composer Service
---
apiVersion: v1
kind: Service
metadata:
  name: egs-composer
  namespace: egs-docmanager
spec:
  ports:
    - port: 8004
      targetPort: 8004
  selector:
    app: egs-composer




# Composer DB Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: composer-db
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: composer-db
  template:
    metadata:
      labels:
        app: composer-db
    spec:
      containers:
      - name: composer-db
        image: redis
        ports:
        - containerPort: 6379

# Composer DB Service
---
apiVersion: v1
kind: Service
metadata:
  name: composer-db
  namespace: egs-docmanager
spec:
  ports:
    - port: 6379
      targetPort: 6379  
  selector:
    app: composer-db



# Auth API Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-api
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-api
  template:
    metadata:
      labels:
        app: auth-api
    spec:
      containers:
      - name: auth-api
        image: registry.deti/egs-docmanager/auth:1.4  # Replace with the correct image if needed
        ports:
        - containerPort: 8010
        env:
        - name: DATABASE_URL
          value: "mongodb://bernardofale:admin@auth-db:27017"
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"

# Auth API Service
---
apiVersion: v1
kind: Service
metadata:
  name: auth-api
  namespace: egs-docmanager
spec:
  ports:
    - port: 8010
      targetPort: 8010
  selector:
    app: auth-api

# Auth DB Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-db
  namespace: egs-docmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-db
  template:
    metadata:
      labels:
        app: auth-db
    spec:
      containers:
      - name: auth-db
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: bernardofale
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: admin
        volumeMounts:
        - name: mongo-persistent-storage
          mountPath: /data/db
      volumes:
      - name: mongo-persistent-storage
        persistentVolumeClaim:
          claimName: auth-pv-claim

# Auth DB Service
---
apiVersion: v1
kind: Service
metadata:
  name: auth-db
  namespace: egs-docmanager
spec:
  ports:
    - port: 27017
      targetPort: 27017  
  selector:
    app: auth-db
  type: NodePort























# Ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: docmanger-api-k3s
  namespace: egs-docmanager
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  rules:
  - host: grupo7-egs-deti.ua.pt
    http:
      paths:
      - path: /documents
        pathType: Prefix
        backend:
          service:
            name: documents
            port: 
              number: 8009
      - path: /meetings
        pathType: Prefix
        backend:
          service:
            name: meetings
            port: 
              number: 8005
      - path: /todo
        pathType: Prefix
        backend:
          service:
            name: todo-api
            port: 
              number: 8002
      - path: /frontend
        pathType: Prefix
        backend:
          service:
            name: frontend
            port: 
              number: 3000
      - path: /notification
        pathType: Prefix
        backend:
          service:
            name: notification
            port: 
              number: 8020
      - path: /composer
        pathType: Prefix
        backend:
          service:
            name: egs-composer
            port:
              number: 8004
